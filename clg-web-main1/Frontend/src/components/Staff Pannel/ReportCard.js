import React, { useState, useEffect, useMemo, useCallback } from 'react';
import axios from 'axios';
import './ReportCard.css';

const ReportCard = () => {
  // State Management
  const [selectedCourse, setSelectedCourse] = useState('');
  const [selectedStudent, setSelectedStudent] = useState('');
  const [selectedExamType, setSelectedExamType] = useState('');
  const [students, setStudents] = useState([]);
  const [courses, setCourses] = useState([]);
  const examTypes = ['Midterm', 'Final', 'Quarterly'];
  const [marksData, setMarksData] = useState([]);
  const [attendancePercent, setAttendancePercent] = useState(0);
  const [remarksText, setRemarksText] = useState('');
  const [reportGenerated, setReportGenerated] = useState(false);
  const [loading, setLoading] = useState(false);
  const [userRole, setUserRole] = useState('');
  const [auditTrail, setAuditTrail] = useState('');
  const [analyticsData, setAnalyticsData] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');

  const fetchInitialData = async () => {
    // Mock data for demonstration
    setCourses(['BSc', 'BA', 'BEd']);
    setStudents([
      { _id: '1', name: 'Rahul Sharma', course: 'BSc', rollNo: '1' },
      { _id: '2', name: 'Priya Singh', course: 'BA', rollNo: '2' },
      { _id: '3', name: 'Amit Kumar', course: 'BEd', rollNo: '1' },
      { _id: '4', name: 'Sneha Patel', course: 'BSc', rollNo: '2' }
    ]);
    // Uncomment below for real API calls
    // try {
    //   const token = localStorage.getItem('token');
    //   const config = { headers: { Authorization: `Bearer ${token}` } };
    //   const classesRes = await axios.get('/api/staff/classes', config);
    //   setCourses(classesRes.data);
    // } catch (error) {
    //   console.error('Error fetching initial data:', error);
    // }
  };

  const fetchStudents = useCallback(async () => {
    if (!selectedCourse) return;
    try {
      const token = localStorage.getItem('token');
      const config = { headers: { Authorization: `Bearer ${token}` } };
      const res = await axios.get(`/api/staff/students?course=${selectedCourse}`, config);
      setStudents(res.data);
    } catch (error) {
      console.error('Error fetching students:', error);
    }
  }, [selectedCourse]);

  const fetchMarks = useCallback(async () => {
    if (!selectedStudent || !selectedExamType) return;
    setLoading(true);
    // Mock data for demonstration
    const mockMarks = [
      { subject: 'Math', marks: '85' },
      { subject: 'Science', marks: '78' },
      { subject: 'English', marks: '92' },
      { subject: 'History', marks: '88' }
    ];
    const mockAttendance = 82;
    const mockRemarks = 'Good performance overall. Needs improvement in Science.';
    const mockAnalytics = [
      { subject: 'Math', performance: 'Excellent' },
      { subject: 'Science', performance: 'Average' },
      { subject: 'English', performance: 'Outstanding' },
      { subject: 'History', performance: 'Good' }
    ];
    // Immediate mock data setting for demonstration
    setMarksData(mockMarks);
    setAttendancePercent(mockAttendance);
    setRemarksText(mockRemarks);
    setReportGenerated(true);
    setAuditTrail(`Generated by ${localStorage.getItem('name') || 'Staff'} on ${new Date().toLocaleDateString()}`);
    setAnalyticsData(mockAnalytics);
    setLoading(false);
    // Uncomment below for real API calls
    // try {
    //   const token = localStorage.getItem('token');
    //   const config = { headers: { Authorization: `Bearer ${token}` } };
    //   const res = await axios.get(`/api/staff/marks?student=${selectedStudent}&exam=${selectedExamType}`, config);
    //   setMarksData(res.data.marks);
    //   setAttendancePercent(res.data.attendance);
    //   setRemarksText(res.data.remarks || '');
    //   setReportGenerated(true);
    //   setAuditTrail(`Generated by ${localStorage.getItem('name')} on ${new Date().toLocaleDateString()}`);
    //   // Fetch analytics
    //   const analyticsRes = await axios.get(`/api/staff/analytics?student=${selectedStudent}`, config);
    //   setAnalyticsData(analyticsRes.data);
    // } catch (error) {
    //   console.error('Error fetching marks:', error);
    // }
    // setLoading(false);
  }, [selectedStudent, selectedExamType]);

  useEffect(() => {
    fetchInitialData();
    const role = localStorage.getItem('role') || 'Staff'; // Assume role is stored
    setUserRole(role);
  }, []);

  useEffect(() => {
    fetchStudents();
  }, [selectedCourse, fetchStudents]);

  useEffect(() => {
    if (selectedStudent && selectedExamType) {
      fetchMarks();
    }
  }, [selectedStudent, selectedExamType, fetchMarks]);

  // Role-Based Rendering
  const canEditMarks = userRole === 'Admin' || userRole === 'ClassTeacher';
  const canEditRemarks = userRole === 'Admin' || userRole === 'ClassTeacher';
  const canViewAnalytics = userRole === 'Admin' || userRole === 'Principal';

  // Actions & Events

  const calculateGrade = (marks) => {
    if (marks >= 90) return 'A';
    if (marks >= 80) return 'B';
    if (marks >= 70) return 'C';
    if (marks >= 60) return 'D';
    return 'F';
  };

  const handleRecalculate = () => {
    // Local recalculation logic
    // Update state accordingly
    setMarksData(prev => prev.map(mark => ({ ...mark, grade: calculateGrade(mark.marks) })));
  };

  const handleGeneratePDF = async () => {
    if (!reportGenerated) return;
    try {
      const token = localStorage.getItem('token');
      const config = { headers: { Authorization: `Bearer ${token}` } };
      await axios.post('/api/staff/generate-pdf', { student: selectedStudent, exam: selectedExamType }, config);
      alert('PDF generated successfully.');
    } catch (error) {
      console.error('Error generating PDF:', error);
    }
  };

  const handleSendToParent = async () => {
    if (!reportGenerated) return;
    try {
      const token = localStorage.getItem('token');
      const config = { headers: { Authorization: `Bearer ${token}` } };
      await axios.post('/api/staff/send-to-parent', { student: selectedStudent }, config);
      alert('Report sent to parent.');
    } catch (error) {
      console.error('Error sending to parent:', error);
    }
  };

  const handlePrint = () => {
    if (!reportGenerated) return;
    window.print();
  };

  // UI Component Tree (Inline Functions)
  const FilterBar = () => (
    <div className="filter-bar">
      <select value={selectedCourse} onChange={(e) => setSelectedCourse(e.target.value)}>
        <option value="">Select Course</option>
        {courses.map(course => <option key={course} value={course}>{course}</option>)}
      </select>
      <div className="search-container">
        <input
          type="text"
          placeholder="Search Student by Name or Roll No"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        {searchTerm && filteredStudents.length > 0 && (
          <ul className="student-list">
            {filteredStudents.map(student => (
              <li key={student._id} onClick={() => { setSelectedStudent(student._id); setSearchTerm(''); }}>
                {student.name} - Roll No: {student.rollNo}
              </li>
            ))}
          </ul>
        )}
      </div>

      <select value={selectedExamType} onChange={(e) => setSelectedExamType(e.target.value)}>
        <option value="">Select Exam Type</option>
        {examTypes.map(exam => <option key={exam} value={exam}>{exam}</option>)}
      </select>
    </div>
  );

  const StudentInfoCard = () => {
    const student = students.find(s => s._id === selectedStudent);
    return student ? (
      <div className="student-info">
        <h3>{student.name}</h3>
        <p>Course: {student.course}</p>
        <p>Roll No: {student.rollNo}</p>
      </div>
    ) : null;
  };

  const filteredStudents = useMemo(() => {
    return students.filter(s => s.name.toLowerCase().includes(searchTerm.toLowerCase()) || s.rollNo.toLowerCase().includes(searchTerm.toLowerCase()));
  }, [students, searchTerm]);

  const MarksTable = () => (
    <table className="marks-table">
      <thead>
        <tr>
          <th>Subject</th>
          <th>Marks</th>
          <th>Grade</th>
        </tr>
      </thead>
      <tbody>
        {marksData.map((mark, index) => (
          <tr key={index}>
            <td>{mark.subject}</td>
            <td>
              {canEditMarks ? (
                <input
                  type="number"
                  value={mark.marks}
                  onChange={(e) => {
                    const newMarks = [...marksData];
                    newMarks[index].marks = e.target.value;
                    setMarksData(newMarks);
                  }}
                />
              ) : (
                mark.marks
              )}
            </td>
            <td>{calculateGrade(mark.marks)}</td>
          </tr>
        ))}
        <tr>
          <td><strong>Total</strong></td>
          <td><strong>{marksData.reduce((sum, m) => sum + parseFloat(m.marks || 0), 0)}</strong></td>
          <td><strong>{calculateGrade(marksData.reduce((sum, m) => sum + parseFloat(m.marks || 0), 0) / marksData.length)}</strong></td>
        </tr>
      </tbody>
    </table>
  );

  const RemarksBox = () => (
    <div className="remarks-box">
      <label>Remarks:</label>
      {canEditRemarks ? (
        <textarea
          value={remarksText}
          onChange={(e) => setRemarksText(e.target.value)}
          maxLength="250"
        />
      ) : (
        <p>{remarksText}</p>
      )}
      <p>{remarksText.length}/250</p>
    </div>
  );

  const AttendanceSummary = () => (
    <div className="attendance-summary">
      <p>Attendance: {attendancePercent}%</p>
      {attendancePercent < 75 && <span className="badge">Low Attendance</span>}
    </div>
  );

  const ActionButtons = () => (
    <div className="action-buttons">
      <button onClick={handleRecalculate} disabled={!reportGenerated}>Recalculate</button>
      <button onClick={handleGeneratePDF} disabled={!reportGenerated}>Generate PDF</button>
      <button onClick={handlePrint} disabled={!reportGenerated}>Print</button>
      <button onClick={handleSendToParent} disabled={!reportGenerated}>Send to Parent</button>
    </div>
  );

  const AnalyticsTab = () => (
    canViewAnalytics ? (
      <div className="analytics-tab">
        <h3>Analytics</h3>
        <ul>
          {analyticsData.map((item, index) => (
            <li key={index}>{item.subject}: {item.performance}</li>
          ))}
        </ul>
      </div>
    ) : null
  );

  return (
    <div className="report-card">
      <h1>Report Card</h1>
      <FilterBar />
      <StudentInfoCard />
      {loading ? <div>Loading...</div> : (
        <>
          <MarksTable />
          <RemarksBox />
          <AttendanceSummary />
          <ActionButtons />
          <AnalyticsTab />
          {auditTrail && <p className="audit-trail">Audit: {auditTrail}</p>}
        </>
      )}
    </div>
  );
};

export default ReportCard;
